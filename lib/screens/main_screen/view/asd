import 'package:brightminds_admin/screens/deleteupdate/update_categories.dart';
import 'package:brightminds_admin/screens/detail/lesson_detail.dart';
import 'package:brightminds_admin/screens/main_screen/add/add_exercise.dart';
import 'package:brightminds_admin/utils/buttons.dart';
import 'package:brightminds_admin/utils/colors.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:uuid/uuid.dart';

class ViewCategory extends StatefulWidget {
  final String categoryName;
  final String image;
  final String id;
  final String level;

  ViewCategory({
    Key? key,
    required this.id,
    required this.categoryName,
    required this.level,
    required this.image,
  }) : super(key: key);

  @override
  State<ViewCategory> createState() => _ViewCategoryState();
}

class _ViewCategoryState extends State<ViewCategory> {
  @override
  void initState() {
    super.initState();
    print(widget.level);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      floatingActionButton: FloatingActionButton(
          child: Icon(Icons.add),
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => AddExerciseScreen(
                  level: widget.level,
                  categoryName: widget.categoryName,
                ),
              ),
            );
          }),
      appBar: AppBar(),
      body: Column(
        children: [
          Expanded(
            child: Row(
              children: [
                FormSelection(
                  id: widget.id,
                  categoryName: widget.categoryName,
                  image: widget.image,
                ),
                ImageSelection(
                  level: widget.level,
                  categoryName: widget.categoryName,
                ),
              ],
            ),
          )
        ],
      ),
    );
  }
}

class FormSelection extends StatelessWidget {
  final String categoryName;
  final String image;
  final String id;

  FormSelection({
    Key? key,
    required this.categoryName,
    required this.image,
    required this.id,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.grey[200],
      width: 448,
      padding: const EdgeInsets.symmetric(horizontal: 50),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircleAvatar(
            radius: 50,
            backgroundImage: NetworkImage(
              image.isNotEmpty ? image : 'https://via.placeholder.com/150',
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Text(
              categoryName,
              style: TextStyle(color: Colors.black),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => UpdateCategories(
                      id: id,
                      categoryName: categoryName,
                      image: image,
                    ),
                  ),
                );
              },
              child: Text("Update"),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: ElevatedButton(
              onPressed: () {
                showDialog(
                  context: context,
                  builder: (BuildContext context) {
                    return AlertDialog(
                      title: Text('Confirm Delete'),
                      content: Text(
                          'Are you sure you want to delete this category?'),
                      actions: [
                        TextButton(
                          onPressed: () {
                            Navigator.pop(context); // Close dialog
                          },
                          child: Text('Cancel'),
                        ),
                        TextButton(
                          onPressed: () async {
                            try {
                              await FirebaseFirestore.instance
                                  .collection('categories')
                                  .doc(id)
                                  .delete();
                              Navigator.pop(context); // Close dialog
                              Navigator.pop(
                                  context); // Go back to previous screen
                            } catch (e) {
                              print("Error deleting category: $e");
                              ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(
                                    content: Text('Failed to delete category')),
                              );
                            }
                          },
                          child: Text('Delete',
                              style: TextStyle(color: Colors.red)),
                        ),
                      ],
                    );
                  },
                );
              },
              child: Text("Delete"),
              style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            ),
          ),
        ],
      ),
    );
  }
}

class ImageSelection extends StatefulWidget {
  final String categoryName;
  final String level;

  ImageSelection({Key? key, required this.categoryName, required this.level})
      : super(key: key);

  @override
  State<ImageSelection> createState() => _ImageSelectionState();
}

class _ImageSelectionState extends State<ImageSelection> {
  bool isCopyMode = false;
  List<Map<String, dynamic>> selectedExercises = [];
  List<String> levels = [];
  List<String> categoryNames = [];
  Map<String, List<String>> levelCategoryMapping = {};
  @override
  void initState() {
    super.initState();
    fetchDropdownData();
  }

  void toggleCopyMode() {
    setState(() {
      isCopyMode = !isCopyMode;
      if (!isCopyMode) {
        selectedExercises.clear();
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final ScrollController _scrollController = ScrollController();
    return Container(
      width: MediaQuery.of(context).size.width * 0.7,
      child: Column(
        children: [
          SizedBox(
            height: 800,
            child: StreamBuilder<QuerySnapshot>(
              stream:
                  FirebaseFirestore.instance.collection('letters').snapshots(),
              builder: (BuildContext context,
                  AsyncSnapshot<QuerySnapshot> snapshot) {
                if (snapshot.hasError) {
                  return Center(child: Text('Error: ${snapshot.error}'));
                }

                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }

                List<Map<String, dynamic>> filteredExercises = [];

                for (var doc in snapshot.data?.docs ?? []) {
                  var exercises = doc['exercises'] as List<dynamic>? ?? [];
                  for (var exercise in exercises) {
                    if (exercise['levelSubCategory'] == widget.categoryName ||
                        exercise['levelCategory'] == widget.level) {
                      filteredExercises.add(exercise);
                    }
                  }
                }

                filteredExercises.sort((a, b) {
                  int parseOrder(String? characterName) {
                    final numberMatch =
                        RegExp(r'^\d+').firstMatch(characterName ?? '');
                    if (numberMatch != null) {
                      return int.parse(numberMatch.group(0)!);
                    }
                    return double.maxFinite.toInt();
                  }

                  String parseString(String? characterName) {
                    return characterName?.toLowerCase() ?? '';
                  }

                  int orderA = parseOrder(a['characterName']);
                  int orderB = parseOrder(b['characterName']);
                  if (orderA != orderB) {
                    return orderA.compareTo(orderB);
                  }

                  return parseString(a['characterName'])
                      .compareTo(parseString(b['characterName']));
                });

                if (filteredExercises.isEmpty) {
                  return const Center(child: Text('No Exercises Found'));
                }

                return Column(
                  children: [
                    SizedBox(
                      height: 700,
                      child: Scrollbar(
                        controller: _scrollController, // Attach the controller
                        thickness: 12,
                        thumbVisibility: true,
                        interactive: true,
                        child: ListView.builder(
                          itemCount: filteredExercises.length,
                          itemBuilder: (BuildContext context, int index) {
                            var exercise = filteredExercises[index];
                            bool isSelected = selectedExercises
                                .any((e) => e['uuid'] == exercise['uuid']);
                            return ListTile(
                              onTap: () {
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (builder) => LessonDetail(
                                      audio: exercise['audioURL'] ?? "No Audio",
                                      categoryName: exercise['levelCategory'] ??
                                          "No Category",
                                      image: exercise['photoURL'] ??
                                          "No Image Available",
                                      id: exercise['uuid'] ?? "No ID",
                                      letter: exercise['characterName'] ??
                                          "Unknown",
                                    ),
                                  ),
                                );
                              },
                              trailing: isCopyMode
                                  ? Checkbox(
                                      value: isSelected,
                                      onChanged: (bool? value) {
                                        setState(() {
                                          if (value == true) {
                                            selectedExercises.add(exercise);
                                          } else {
                                            selectedExercises.removeWhere((e) =>
                                                e['uuid'] == exercise['uuid']);
                                          }
                                        });
                                      },
                                    )
                                  : SizedBox(),
                              leading: CircleAvatar(
                                backgroundImage: NetworkImage(
                                  exercise['photoURL'] ??
                                      'https://via.placeholder.com/150',
                                ),
                              ),
                              title: Text(
                                  "Subject: ${exercise['levelSubCategory'] ?? 'N/A'}"),
                              subtitle: Text(
                                "Lesson: ${exercise['characterName'] ?? 'Unknown Lesson'}",
                              ),
                            );
                          },
                        ),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          SaveButton(
                            color: mainBtnColor,
                            onTap: toggleCopyMode,
                            title: isCopyMode ? 'Cancel Copy' : 'Copy',
                          ),
                          const SizedBox(width: 16),
                          if (isCopyMode && selectedExercises.isNotEmpty)
                            SaveButton(
                              color: mainBtnColor,
                              onTap: openPasteDialog,
                              title: 'Paste',
                            ),
                        ],
                      ),
                    ),
                  ],
                );
              },
            ),
          )
        ],
      ),
    );
  }

  void fetchDropdownData() async {
    try {
      var querySnapshot =
          await FirebaseFirestore.instance.collection('categories').get();

      Map<String, List<String>> levelCategoryMapping = {};

      for (var doc in querySnapshot.docs) {
        String level = doc['level'];
        String categoryName = doc['categoryName'];

        // Collect categories per level
        if (!levelCategoryMapping.containsKey(level)) {
          levelCategoryMapping[level] = [];
        }
        levelCategoryMapping[level]?.add(categoryName); // Allow duplicates
      }

      setState(() {
        this.levelCategoryMapping = levelCategoryMapping;
      });
    } catch (e) {
      print("Error fetching dropdown data: $e");
    }
  }

  void openPasteDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        String? tempSelectedLevel;
        String? tempSelectedCategoryName;
        List<String> filteredCategories = [];
        List<String> allLevels = [
          'Pre-Kindergarden',
          'Kindergarden',
          'Level 1',
          'Level 2',
          'Level 3',
          'Level 4',
          'Level 5',
          'Level 6',
          'Προνήπιο',
          'Νηπιαγωγείο',
          'Επίπεδο 1',
          'Επίπεδο 2',
          'Επίπεδο 3',
          'Επίπεδο 4',
          'Επίπεδο 5',
          'Επίπεδο 6',
        ];

        return StatefulBuilder(
          builder: (BuildContext context, setState) {
            void filterCategories(String? level) {
              if (level != null && levelCategoryMapping.containsKey(level)) {
                // Get all categories related to the selected level, including duplicates
                filteredCategories = levelCategoryMapping[level]!;
              } else {
                filteredCategories = [];
              }
              setState(() {});
            }

            return AlertDialog(
              title: const Text('Paste Exercises'),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  // Dropdown for Levels
                  DropdownButtonFormField<String>(
                    value: tempSelectedLevel,
                    hint: const Text('Select Level'),
                    onChanged: (value) {
                      setState(() {
                        tempSelectedLevel = value;
                        tempSelectedCategoryName = null;
                        filterCategories(tempSelectedLevel);
                      });
                    },
                    items: allLevels
                        .map((level) => DropdownMenuItem(
                              value: level,
                              child: Text(level),
                            ))
                        .toList(),
                  ),
                  const SizedBox(height: 16),
                  // Dropdown for Category Names (including duplicates across levels)
                  DropdownButtonFormField<String>(
                    value: tempSelectedCategoryName,
                    hint: const Text('Select Category Name'),
                    onChanged: (value) {
                      setState(() {
                        tempSelectedCategoryName = value;
                      });
                    },
                    items: filteredCategories.isNotEmpty
                        ? filteredCategories
                            .map((categoryName) => DropdownMenuItem(
                                  value: categoryName,
                                  child: Text(categoryName),
                                ))
                            .toList()
                        : [
                            DropdownMenuItem(
                              value: null,
                              child: Text(
                                  'No subjects available. Please add subjects and try again.',
                                  style: TextStyle(color: Colors.red)),
                            )
                          ],
                  )
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                  child: const Text('Cancel'),
                ),
                TextButton(
                  onPressed: () {
                    // If no category selected, show a message
                    if (tempSelectedLevel == null ||
                        tempSelectedCategoryName == null) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                          content:
                              Text('Please select both Level and Category'),
                        ),
                      );
                      Navigator.pop(context); // Close the dialog
                      return;
                    }

                    duplicateExercises(
                      context,
                      tempSelectedLevel,
                      tempSelectedCategoryName,
                    );
                    Navigator.pop(context); // Close the dialog after pasting
                  },
                  child: const Text('Paste'),
                ),
              ],
            );
          },
        );
      },
    );
  }

  void duplicateExercises(
    BuildContext context,
    String? selectedLevel,
    String? selectedCategoryName,
  ) async {
    if (selectedLevel == null || selectedCategoryName == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select both Level and Category')),
      );
      return;
    }

    for (var exercise in selectedExercises) {
      String newDocumentId = Uuid().v4();

      Map<String, dynamic> newExercise = {
        'audioURL': exercise['audioURL'],
        'photoURL': exercise['photoURL'],
        'characterName': exercise['characterName'],
        'levelSubCategory': selectedCategoryName,
        'levelCategory': selectedLevel,
        'uuid': newDocumentId,
      };

      try {
        await FirebaseFirestore.instance
            .collection('letters')
            .doc(newDocumentId)
            .set({
          'exercises': [newExercise],
        });

        print('Exercise duplicated with new ID: $newDocumentId');
      } catch (e) {
        print('Failed to duplicate exercise: $e');
      }
    }

    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Exercises duplicated successfully!')),
    );
  }
}
